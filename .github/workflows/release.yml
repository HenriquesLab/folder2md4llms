name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup build environment
      uses: ./.github/actions/setup-build-environment
      with:
        install-groups: '--group dev'

    - name: Get version
      id: version
      run: |
        VERSION=$(uv run python -c "from folder2md4llms.__version__ import __version__; print(__version__)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"

    - name: Validate release requirements
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "Validating release for version $VERSION..."

        # Check CHANGELOG entry exists
        if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
          echo "‚ùå ERROR: No CHANGELOG entry found for version $VERSION"
          echo "Please add an entry to CHANGELOG.md with format:"
          echo "## [$VERSION] - $(date +%Y-%m-%d)"
          exit 1
        fi
        echo "‚úÖ CHANGELOG entry found"

        # Check CHANGELOG has proper date format
        if ! grep -E "## \[$VERSION\] - [0-9]{4}-[0-9]{2}-[0-9]{2}" CHANGELOG.md; then
          echo "‚ö†Ô∏è  WARNING: CHANGELOG entry may be missing date"
          echo "Expected format: ## [$VERSION] - YYYY-MM-DD"
        else
          echo "‚úÖ CHANGELOG date format verified"
        fi

        # Check tag doesn't already exist (only when triggered by tag push)
        if [ "${{ github.ref_type }}" == "tag" ]; then
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "‚ùå ERROR: Tag v$VERSION already exists"
            echo "Did you forget to bump the version?"
            exit 1
          fi
          echo "‚úÖ Version tag is new"
        fi

        echo "‚úÖ All release validation checks passed"

    - name: Run tests
      run: uv run pytest -x --tb=short

    - name: Build package
      run: |
        echo "::group::Building package"
        uv build
        echo "::endgroup::"

        echo "::group::Validate package"
        uv tool install twine
        uv tool run twine check dist/*
        echo "::endgroup::"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 30


  pypi:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    environment: pypi
    if: github.ref_type == 'tag'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true

    - name: Test installation from PyPI
      run: |
        # Wait for package to be available on PyPI using intelligent polling
        ./.github/scripts/wait-for-pypi.sh folder2md4llms ${{ needs.build.outputs.version }} https://pypi.org/simple/

        python -m pip install --upgrade pip

        # Retry logic for PyPI installation
        MAX_ATTEMPTS=5
        ATTEMPT=1
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to install from PyPI..."

          if python -m pip install folder2md4llms==${{ needs.build.outputs.version }}; then
            echo "Successfully installed from PyPI"
            break
          else
            echo "Installation failed, attempt $ATTEMPT of $MAX_ATTEMPTS"
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "All attempts failed, exiting"
              exit 1
            fi
            echo "Waiting 30 seconds before retry..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          fi
        done

        # Test basic functionality
        folder2md --version
        echo "# Test" > test.md
        folder2md . --output test_output.md
        test -f test_output.md



  create-release:
    runs-on: ubuntu-latest
    needs: [build, pypi]
    if: github.ref_type == 'tag' && success()
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        name: "Release ${{ github.ref_name }}"
        body: |
          ## Release ${{ github.ref_name }}

          New version of folder2md4llms is now available on PyPI!

          ### Installation

          **üêç Python Package (Recommended):**
          ```bash
          # Using pipx (recommended)
          pipx install folder2md4llms

          # Or using pip
          pip install folder2md4llms

          # Using uv (fast alternative)
          uv tool install folder2md4llms
          ```

          **Platform-Specific Setup:**

          **macOS:**
          ```bash
          brew install pipx
          pipx install folder2md4llms
          ```

          **Linux:**
          ```bash
          python3 -m pip install --user pipx
          pipx install folder2md4llms
          ```

          **Windows (WSL2 Recommended):**
          ```bash
          # Install WSL2 first (run in PowerShell as Administrator)
          wsl --install -d Ubuntu-22.04

          # Then in WSL2, follow Linux instructions
          python3 -m pip install --user pipx
          pipx install folder2md4llms
          ```

          ### Verification
          ```bash
          folder2md --version
          folder2md --help
          ```

          ---
          üì¶ Available on [PyPI](https://pypi.org/project/folder2md4llms/) ‚Ä¢ üìö [Documentation](https://github.com/henriqueslab/folder2md4llms#readme)
