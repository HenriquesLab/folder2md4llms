name: Build Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.4.37)'
        required: false
        type: string

permissions:
  contents: read
  actions: write

jobs:
  build-macos:
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - arch: x64
            runner: macos-13  # Intel runner
          - arch: arm64
            runner: macos-latest  # Apple Silicon runner
    runs-on: ${{ matrix.runner }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Get version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=$(uv run python -c "from folder2md4llms.__version__ import __version__; print(__version__)")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Install dependencies
      run: |
        uv sync --group dev --extra build --extra tiktoken

    - name: Install platform-specific dependencies
      run: |
        # Install libmagic for macOS
        brew install libmagic

    - name: Prepare PyInstaller spec for architecture
      run: |
        # Create architecture-specific spec file
        cp folder2md.spec folder2md-${{ matrix.arch }}.spec

        # Target architecture is already set to None in the base spec

        # Update binary name to include architecture
        sed -i '' 's/name="folder2md"/name="folder2md-macos-${{ matrix.arch }}"/' folder2md-${{ matrix.arch }}.spec

    - name: Build binary with PyInstaller
      run: |
        echo "::group::Building binary for ${{ matrix.arch }}"

        # Build the binary (native compilation)
        uv run pyinstaller folder2md-${{ matrix.arch }}.spec --clean --noconfirm

        echo "::endgroup::"

    - name: Verify binary
      run: |
        echo "::group::Verifying binary"

        BINARY_PATH="dist/folder2md-macos-${{ matrix.arch }}"

        if [ ! -f "$BINARY_PATH" ]; then
          echo "❌ Binary not found at $BINARY_PATH"
          ls -la dist/
          exit 1
        fi

        echo "✅ Binary found: $BINARY_PATH"
        ls -lh "$BINARY_PATH"

        # Check architecture
        file "$BINARY_PATH"

        # Test basic functionality (native build)
        echo "Testing binary functionality..."
        "$BINARY_PATH" --version
        "$BINARY_PATH" --help > /dev/null

        echo "::endgroup::"

    - name: Generate checksums
      run: |
        echo "::group::Generating checksums"

        cd dist
        BINARY_NAME="folder2md-macos-${{ matrix.arch }}"

        # Generate SHA256 checksum
        shasum -a 256 "$BINARY_NAME" > "${BINARY_NAME}.sha256"

        # Generate MD5 checksum for additional verification
        md5 "$BINARY_NAME" > "${BINARY_NAME}.md5"

        echo "Generated checksums:"
        cat "${BINARY_NAME}.sha256"
        cat "${BINARY_NAME}.md5"

        echo "::endgroup::"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: folder2md-macos-${{ matrix.arch }}
        path: |
          dist/folder2md-macos-${{ matrix.arch }}
          dist/folder2md-macos-${{ matrix.arch }}.sha256
          dist/folder2md-macos-${{ matrix.arch }}.md5
        retention-days: 30

  build-windows:
    runs-on: windows-latest
    timeout-minutes: 60
    strategy:
      matrix:
        arch: [x64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Get version
      id: version
      run: |
        if ($env:GITHUB_EVENT_INPUTS_VERSION) {
          $VERSION = $env:GITHUB_EVENT_INPUTS_VERSION
        } else {
          $VERSION = uv run python -c "from folder2md4llms.__version__ import __version__; print(__version__)"
        }
        echo "version=$VERSION" >> $env:GITHUB_OUTPUT
        Write-Host "Building version: $VERSION"
      shell: pwsh

    - name: Install dependencies
      run: |
        uv sync --group dev --extra build --extra tiktoken
      shell: pwsh

    - name: Prepare PyInstaller spec for Windows
      run: |
        # Create Windows-specific spec file
        Copy-Item folder2md.spec folder2md-windows-${{ matrix.arch }}.spec

        # Update binary name to include platform and architecture
        (Get-Content folder2md-windows-${{ matrix.arch }}.spec) -replace 'name="folder2md"', 'name="folder2md-windows-${{ matrix.arch }}"' | Set-Content folder2md-windows-${{ matrix.arch }}.spec
      shell: pwsh

    - name: Build binary with PyInstaller
      run: |
        Write-Host "::group::Building Windows binary for ${{ matrix.arch }}"

        # Build the binary
        uv run pyinstaller folder2md-windows-${{ matrix.arch }}.spec --clean --noconfirm

        Write-Host "::endgroup::"
      shell: pwsh

    - name: Verify binary
      run: |
        Write-Host "::group::Verifying Windows binary"

        $BINARY_PATH = "dist/folder2md-windows-${{ matrix.arch }}.exe"

        if (-not (Test-Path $BINARY_PATH)) {
          Write-Host "❌ Binary not found at $BINARY_PATH"
          Get-ChildItem dist/
          exit 1
        }

        Write-Host "✅ Binary found: $BINARY_PATH"
        Get-ChildItem $BINARY_PATH | Format-List

        # Test basic functionality
        Write-Host "Testing binary functionality..."
        & $BINARY_PATH --version
        & $BINARY_PATH --help | Out-Null

        Write-Host "::endgroup::"
      shell: pwsh

    - name: Generate checksums
      run: |
        Write-Host "::group::Generating checksums"

        Set-Location dist
        $BINARY_NAME = "folder2md-windows-${{ matrix.arch }}.exe"

        # Generate SHA256 checksum
        $sha256 = (Get-FileHash $BINARY_NAME -Algorithm SHA256).Hash.ToLower()
        "$sha256  $BINARY_NAME" | Out-File -FilePath "${BINARY_NAME}.sha256" -Encoding ascii

        # Generate MD5 checksum for additional verification
        $md5 = (Get-FileHash $BINARY_NAME -Algorithm MD5).Hash.ToLower()
        "$md5  $BINARY_NAME" | Out-File -FilePath "${BINARY_NAME}.md5" -Encoding ascii

        Write-Host "Generated checksums:"
        Get-Content "${BINARY_NAME}.sha256"
        Get-Content "${BINARY_NAME}.md5"

        Write-Host "::endgroup::"
      shell: pwsh

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: folder2md-windows-${{ matrix.arch }}
        path: |
          dist/folder2md-windows-${{ matrix.arch }}.exe
          dist/folder2md-windows-${{ matrix.arch }}.exe.sha256
          dist/folder2md-windows-${{ matrix.arch }}.exe.md5
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Get version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=$(uv run python -c "from folder2md4llms.__version__ import __version__; print(__version__)")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 libmagic-dev

    - name: Install dependencies
      run: |
        uv sync --group dev --extra build --extra tiktoken

    - name: Prepare PyInstaller spec for Linux
      run: |
        echo "=== DEBUGGING: Checking if template exists ==="
        if [ ! -f folder2md-linux.spec.template ]; then
            echo "❌ ERROR: Template file not found!"
            ls -la folder2md*.spec*
            exit 1
        fi
        ls -la folder2md-linux.spec.template

        echo "=== Template content preview ==="
        head -5 folder2md-linux.spec.template
        echo "=== Template has darwin? ==="
        if grep -n "darwin" folder2md-linux.spec.template; then
            echo "❌ ERROR: Template contains darwin references!"
            exit 1
        else
            echo "✓ Template is clean"
        fi

        # Use dedicated Linux spec template
        echo "Copying template..."
        cp folder2md-linux.spec.template folder2md-linux-${{ matrix.arch }}.spec

        if [ ! -f folder2md-linux-${{ matrix.arch }}.spec ]; then
            echo "❌ ERROR: Failed to create spec file!"
            exit 1
        fi

        # Update binary name placeholder
        echo "Updating binary name..."
        sed -i 's/BINARY_NAME_PLACEHOLDER/folder2md-linux-${{ matrix.arch }}/' folder2md-linux-${{ matrix.arch }}.spec

        echo "=== Linux spec file prepared ==="
        wc -l folder2md-linux-${{ matrix.arch }}.spec
        echo "Checking final spec around line 166:"
        sed -n '160,170p' folder2md-linux-${{ matrix.arch }}.spec
        echo "Final darwin check:"
        if grep -n "darwin" folder2md-linux-${{ matrix.arch }}.spec; then
            echo "❌ ERROR: Final spec still contains darwin!"
            exit 1
        else
            echo "✓ Final spec is clean"
        fi

    - name: Set up cross-compilation (ARM64)
      if: matrix.arch == 'arm64'
      run: |
        # This is a placeholder for ARM64 cross-compilation setup
        # For now, we'll build x64 only and add ARM64 support later
        echo "ARM64 cross-compilation setup would go here"

    - name: Build binary with PyInstaller
      run: |
        echo "::group::Building Linux binary for ${{ matrix.arch }}"

        echo "=== FINAL CHECK: What spec file are we actually using? ==="
        ls -la folder2md-linux-${{ matrix.arch }}.spec
        echo "Lines 160-170 of the spec file we're about to use:"
        sed -n '160,170p' folder2md-linux-${{ matrix.arch }}.spec
        echo "Darwin check on final spec:"
        if grep -n "darwin" folder2md-linux-${{ matrix.arch }}.spec; then
            echo "❌ CRITICAL: Spec file STILL contains darwin at build time!"
            echo "This should not happen - something is wrong!"
            exit 1
        else
            echo "✓ Final spec file is clean at build time"
        fi

        uv run pyinstaller folder2md-linux-${{ matrix.arch }}.spec --clean --noconfirm
        echo "::endgroup::"

    - name: Verify binary
      run: |
        echo "::group::Verifying Linux binary"

        BINARY_PATH="dist/folder2md-linux-${{ matrix.arch }}"

        if [ ! -f "$BINARY_PATH" ]; then
          echo "❌ Binary not found at $BINARY_PATH"
          ls -la dist/
          exit 1
        fi

        echo "✅ Binary found: $BINARY_PATH"
        ls -lh "$BINARY_PATH"

        # Check binary info
        file "$BINARY_PATH"

        # Test basic functionality
        "$BINARY_PATH" --version
        "$BINARY_PATH" --help > /dev/null

        echo "::endgroup::"

    - name: Generate checksums
      run: |
        echo "::group::Generating checksums"

        cd dist
        BINARY_NAME="folder2md-linux-${{ matrix.arch }}"

        # Generate SHA256 checksum
        sha256sum "$BINARY_NAME" > "${BINARY_NAME}.sha256"

        # Generate MD5 checksum
        md5sum "$BINARY_NAME" > "${BINARY_NAME}.md5"

        echo "Generated checksums:"
        cat "${BINARY_NAME}.sha256"
        cat "${BINARY_NAME}.md5"

        echo "::endgroup::"

    - name: Upload artifacts
      if: matrix.arch == 'x64'
      uses: actions/upload-artifact@v4
      with:
        name: folder2md-linux-${{ matrix.arch }}
        path: |
          dist/folder2md-linux-${{ matrix.arch }}
          dist/folder2md-linux-${{ matrix.arch }}.sha256
          dist/folder2md-linux-${{ matrix.arch }}.md5
        retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [build-macos, build-windows, build-linux]
    if: github.ref_type == 'tag'
    timeout-minutes: 20

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release assets
      run: |
        echo "::group::Preparing release assets"

        mkdir -p release-assets

        # Copy all binaries and checksums to release assets
        find artifacts/ -type f \( -name "folder2md-*" -o -name "*.sha256" -o -name "*.md5" \) -exec cp {} release-assets/ \;

        echo "Release assets:"
        ls -la release-assets/

        echo "::endgroup::"

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        name: "Release ${{ github.ref_name }}"
        body: |
          ## 🚀 Binary Release ${{ github.ref_name }}

          This release includes pre-built binaries for multiple platforms:

          ### macOS Binaries
          - `folder2md-macos-x64` - Intel 64-bit macOS
          - `folder2md-macos-arm64` - Apple Silicon (M1/M2) macOS

          ### Windows Binaries
          - `folder2md-windows-x64.exe` - Windows 64-bit

          ### Linux Binaries
          - `folder2md-linux-x64` - Linux 64-bit

          ### Installation

          **macOS (Homebrew - Binary):**
          ```bash
          brew install --cask henriqueslab/tap/folder2md4llms-binary
          ```

          **macOS (Homebrew - Python Package):**
          ```bash
          brew install henriqueslab/tap/folder2md4llms
          ```

          **Windows (Scoop):**
          ```bash
          scoop bucket add henriqueslab https://github.com/HenriquesLab/scoop-folder2md4llms
          scoop install folder2md4llms-binary
          ```

          **Manual Installation:**
          1. Download the appropriate binary for your platform
          2. **macOS/Linux**: Make it executable: `chmod +x folder2md-*`
          3. **All platforms**: Move to PATH:
             - **macOS/Linux**: `sudo mv folder2md-* /usr/local/bin/folder2md`
             - **Windows**: Place `folder2md-windows-x64.exe` in a directory in your PATH

          ### Verification
          All binaries include SHA256 and MD5 checksums for verification.

          ---
          🤖 Binaries built automatically with PyInstaller
