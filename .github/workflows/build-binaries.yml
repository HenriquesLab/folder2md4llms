name: Build Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.4.37)'
        required: false
        type: string

permissions:
  contents: read
  actions: write

jobs:
  build-macos:
    runs-on: macos-latest
    timeout-minutes: 60
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Get version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=$(uv run python -c "from folder2md4llms.__version__ import __version__; print(__version__)")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Install dependencies
      run: |
        uv sync --group dev --extra build --extra tiktoken

    - name: Install platform-specific dependencies
      run: |
        # Install libmagic for macOS
        brew install libmagic

    - name: Prepare PyInstaller spec for architecture
      run: |
        # Create architecture-specific spec file
        cp folder2md.spec folder2md-${{ matrix.arch }}.spec

        # Update target architecture in spec file
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sed -i '' 's/target_arch="universal2"/target_arch="arm64"/' folder2md-${{ matrix.arch }}.spec
        else
          sed -i '' 's/target_arch="universal2"/target_arch="x86_64"/' folder2md-${{ matrix.arch }}.spec
        fi

        # Update binary name to include architecture
        sed -i '' 's/name="folder2md"/name="folder2md-macos-${{ matrix.arch }}"/' folder2md-${{ matrix.arch }}.spec

    - name: Build binary with PyInstaller
      run: |
        echo "::group::Building binary for ${{ matrix.arch }}"

        # Set environment variables for cross-compilation
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          export ARCHFLAGS="-arch arm64"
          export _PYTHON_HOST_PLATFORM="macosx-11.0-arm64"
        else
          export ARCHFLAGS="-arch x86_64"
          export _PYTHON_HOST_PLATFORM="macosx-10.15-x86_64"
        fi

        # Build the binary
        uv run pyinstaller folder2md-${{ matrix.arch }}.spec --clean --noconfirm

        echo "::endgroup::"

    - name: Verify binary
      run: |
        echo "::group::Verifying binary"

        BINARY_PATH="dist/folder2md-macos-${{ matrix.arch }}"

        if [ ! -f "$BINARY_PATH" ]; then
          echo "❌ Binary not found at $BINARY_PATH"
          ls -la dist/
          exit 1
        fi

        echo "✅ Binary found: $BINARY_PATH"
        ls -lh "$BINARY_PATH"

        # Check architecture
        file "$BINARY_PATH"

        # Test basic functionality (if running on compatible architecture)
        if [ "${{ matrix.arch }}" = "x64" ] || [ "$(uname -m)" = "arm64" ]; then
          echo "Testing binary functionality..."
          "$BINARY_PATH" --version || echo "Version check failed (may be expected for cross-compiled binary)"
          "$BINARY_PATH" --help > /dev/null || echo "Help check failed (may be expected for cross-compiled binary)"
        else
          echo "Skipping functionality test for cross-compiled binary"
        fi

        echo "::endgroup::"

    - name: Generate checksums
      run: |
        echo "::group::Generating checksums"

        cd dist
        BINARY_NAME="folder2md-macos-${{ matrix.arch }}"

        # Generate SHA256 checksum
        shasum -a 256 "$BINARY_NAME" > "${BINARY_NAME}.sha256"

        # Generate MD5 checksum for additional verification
        md5 "$BINARY_NAME" > "${BINARY_NAME}.md5"

        echo "Generated checksums:"
        cat "${BINARY_NAME}.sha256"
        cat "${BINARY_NAME}.md5"

        echo "::endgroup::"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: folder2md-macos-${{ matrix.arch }}
        path: |
          dist/folder2md-macos-${{ matrix.arch }}
          dist/folder2md-macos-${{ matrix.arch }}.sha256
          dist/folder2md-macos-${{ matrix.arch }}.md5
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Get version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=$(uv run python -c "from folder2md4llms.__version__ import __version__; print(__version__)")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 libmagic-dev

    - name: Install dependencies
      run: |
        uv sync --group dev --extra build --extra tiktoken

    - name: Prepare PyInstaller spec for Linux
      run: |
        # Create Linux-specific spec file
        cp folder2md.spec folder2md-linux-${{ matrix.arch }}.spec

        # Remove macOS-specific configurations
        sed -i 's/target_arch="universal2"/target_arch=None/' folder2md-linux-${{ matrix.arch }}.spec
        sed -i '/codesign_identity/d' folder2md-linux-${{ matrix.arch }}.spec
        sed -i '/entitlements_file/d' folder2md-linux-${{ matrix.arch }}.spec
        sed -i '/BUNDLE/,$d' folder2md-linux-${{ matrix.arch }}.spec

        # Update binary name
        sed -i 's/name="folder2md"/name="folder2md-linux-${{ matrix.arch }}"/' folder2md-linux-${{ matrix.arch }}.spec

    - name: Set up cross-compilation (ARM64)
      if: matrix.arch == 'arm64'
      run: |
        # This is a placeholder for ARM64 cross-compilation setup
        # For now, we'll build x64 only and add ARM64 support later
        echo "ARM64 cross-compilation setup would go here"

    - name: Build binary with PyInstaller
      if: matrix.arch == 'x64'
      run: |
        echo "::group::Building Linux binary for ${{ matrix.arch }}"
        uv run pyinstaller folder2md-linux-${{ matrix.arch }}.spec --clean --noconfirm
        echo "::endgroup::"

    - name: Skip ARM64 build for now
      if: matrix.arch == 'arm64'
      run: |
        echo "ARM64 Linux builds are not yet implemented"
        echo "Creating placeholder for future implementation"
        mkdir -p dist
        echo "ARM64 Linux build placeholder" > dist/folder2md-linux-arm64

    - name: Verify binary
      if: matrix.arch == 'x64'
      run: |
        echo "::group::Verifying Linux binary"

        BINARY_PATH="dist/folder2md-linux-${{ matrix.arch }}"

        if [ ! -f "$BINARY_PATH" ]; then
          echo "❌ Binary not found at $BINARY_PATH"
          ls -la dist/
          exit 1
        fi

        echo "✅ Binary found: $BINARY_PATH"
        ls -lh "$BINARY_PATH"

        # Check binary info
        file "$BINARY_PATH"

        # Test basic functionality
        "$BINARY_PATH" --version
        "$BINARY_PATH" --help > /dev/null

        echo "::endgroup::"

    - name: Generate checksums
      if: matrix.arch == 'x64'
      run: |
        echo "::group::Generating checksums"

        cd dist
        BINARY_NAME="folder2md-linux-${{ matrix.arch }}"

        # Generate SHA256 checksum
        sha256sum "$BINARY_NAME" > "${BINARY_NAME}.sha256"

        # Generate MD5 checksum
        md5sum "$BINARY_NAME" > "${BINARY_NAME}.md5"

        echo "Generated checksums:"
        cat "${BINARY_NAME}.sha256"
        cat "${BINARY_NAME}.md5"

        echo "::endgroup::"

    - name: Upload artifacts
      if: matrix.arch == 'x64'
      uses: actions/upload-artifact@v4
      with:
        name: folder2md-linux-${{ matrix.arch }}
        path: |
          dist/folder2md-linux-${{ matrix.arch }}
          dist/folder2md-linux-${{ matrix.arch }}.sha256
          dist/folder2md-linux-${{ matrix.arch }}.md5
        retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [build-macos, build-linux]
    if: github.ref_type == 'tag'
    timeout-minutes: 20

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release assets
      run: |
        echo "::group::Preparing release assets"

        mkdir -p release-assets

        # Copy all binaries and checksums to release assets
        find artifacts/ -type f \( -name "folder2md-*" -o -name "*.sha256" -o -name "*.md5" \) -exec cp {} release-assets/ \;

        echo "Release assets:"
        ls -la release-assets/

        echo "::endgroup::"

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        name: "Release ${{ github.ref_name }}"
        body: |
          ## 🚀 Binary Release ${{ github.ref_name }}

          This release includes pre-built binaries for multiple platforms:

          ### macOS Binaries
          - `folder2md-macos-x64` - Intel 64-bit macOS
          - `folder2md-macos-arm64` - Apple Silicon (M1/M2) macOS

          ### Linux Binaries
          - `folder2md-linux-x64` - Linux 64-bit

          ### Installation

          **macOS (Homebrew):**
          ```bash
          brew install henriqueslab/tap/folder2md4llms
          ```

          **Manual Installation:**
          1. Download the appropriate binary for your platform
          2. Make it executable: `chmod +x folder2md-*`
          3. Move to PATH: `sudo mv folder2md-* /usr/local/bin/folder2md`

          ### Verification
          All binaries include SHA256 and MD5 checksums for verification.

          ---
          🤖 Binaries built automatically with PyInstaller
