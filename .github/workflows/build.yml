name: Build

on:
  push:
    branches: [main, dev]
    paths:
      - 'src/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - 'src/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/build.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      wheel-name: ${{ steps.build.outputs.wheel-name }}
      sdist-name: ${{ steps.build.outputs.sdist-name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for hatch-vcs

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Install dependencies
      run: uv sync --group dev

    - name: Get version
      id: version
      run: |
        VERSION=$(uv run python -c "from folder2md4llms.__about__ import __version__; print(__version__)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"

    - name: Build package
      id: build
      run: |
        echo "::group::Building package"
        uv build
        echo "::endgroup::"

        echo "::group::Package contents"
        ls -la dist/
        echo "::endgroup::"

        # Extract filenames
        WHEEL_NAME=$(ls dist/*.whl | head -1 | xargs basename)
        SDIST_NAME=$(ls dist/*.tar.gz | head -1 | xargs basename)

        echo "wheel-name=$WHEEL_NAME" >> $GITHUB_OUTPUT
        echo "sdist-name=$SDIST_NAME" >> $GITHUB_OUTPUT

        echo "Built wheel: $WHEEL_NAME"
        echo "Built sdist: $SDIST_NAME"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 30

  test-install:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.11', '3.13']

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Install from wheel
      run: |
        python -m pip install --upgrade pip
        python -m pip install dist/${{ needs.build.outputs.wheel-name }}

    - name: Test installed package
      run: |
        echo "::group::Testing CLI availability"
        folder2md --help
        echo "::endgroup::"

        echo "::group::Testing version"
        folder2md --version
        VERSION_OUTPUT=$(folder2md --version 2>&1)
        echo "Version output: $VERSION_OUTPUT"

        # Check if version matches expected
        if [[ "$VERSION_OUTPUT" == *"${{ needs.build.outputs.version }}"* ]]; then
          echo "✅ Version matches expected: ${{ needs.build.outputs.version }}"
        else
          echo "❌ Version mismatch!"
          exit 1
        fi
        echo "::endgroup::"

        echo "::group::Testing basic functionality"
        mkdir -p test_dir
        echo "# Test" > test_dir/README.md
        echo "print('test')" > test_dir/script.py

        folder2md test_dir --output test_output.md

        if [ -f test_output.md ]; then
          echo "✅ Output file created"
          if grep -q "Test" test_output.md; then
            echo "✅ Content processed correctly"
          else
            echo "❌ Content not found in output"
            exit 1
          fi
        else
          echo "❌ Output file not created"
          exit 1
        fi
        echo "::endgroup::"

    - name: Cleanup
      if: always()
      run: |
        rm -rf test_dir test_output.md || true

  test-sdist:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Install from sdist
      run: |
        python -m pip install --upgrade pip build
        python -m pip install dist/${{ needs.build.outputs.sdist-name }}

    - name: Test sdist installation
      run: |
        folder2md --help
        folder2md --version

  validate-metadata:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install validation tools
      run: |
        python -m pip install --upgrade pip twine check-wheel-contents

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Validate package metadata
      run: |
        echo "::group::Validating with twine"
        twine check dist/*
        echo "::endgroup::"

        echo "::group::Validating wheel contents"
        check-wheel-contents dist/*.whl
        echo "::endgroup::"

        echo "::group::Package information"
        python -m pip install dist/${{ needs.build.outputs.wheel-name }}
        python -c "
        import pkg_resources
        dist = pkg_resources.get_distribution('folder2md4llms')
        print(f'Name: {dist.project_name}')
        print(f'Version: {dist.version}')
        print(f'Location: {dist.location}')
        print(f'Requirements: {dist.requires()}')
        "
        echo "::endgroup::"
