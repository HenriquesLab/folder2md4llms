name: CI

on:
  push:
    branches: [main, dev]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Separate lint job that runs once for faster feedback
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for hatch-vcs

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Install dependencies
      run: uv sync --group dev

    - name: Run linting and formatting checks
      run: |
        echo "::group::Code formatting check"
        uv run ruff check src/ tests/
        echo "::endgroup::"

        echo "::group::Format check"
        uv run ruff format --check src/ tests/
        echo "::endgroup::"

    - name: Run type checking
      run: |
        echo "::group::Type checking"
        uv run mypy src/
        echo "::endgroup::"

    - name: Run security check
      run: |
        echo "::group::Security check"
        uv run bandit -r src/ -ll
        echo "::endgroup::"

  # Test matrix depends on lint passing
  test:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12', '3.13']
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: macos-latest
            python-version: '3.12'
          - os: windows-latest
            python-version: '3.12'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for hatch-vcs

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Install dependencies
      run: uv sync --group dev

    - name: Run tests
      run: uv run pytest tests/ --cov=folder2md4llms --cov-report=xml --cov-report=term-missing -n auto --maxfail=10 --tb=short -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  test-optional-dependencies:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        extra-deps: [all]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Install dependencies with extras
      run: |
        if [ "${{ matrix.extra-deps }}" = "all" ]; then
          uv sync --group dev --all-extras
        else
          uv sync --group dev --extra ${{ matrix.extra-deps }}
        fi

    - name: Test with optional dependencies
      run: |
        uv run pytest tests/test_converters.py -v || true
        uv run pytest tests/test_processor.py -v

  integration-test:
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Install package
      run: uv sync --group dev --extra tiktoken

    - name: Test CLI functionality
      run: |
        echo "::group::Testing CLI help"
        uv run folder2md --help
        echo "::endgroup::"

        echo "::group::Testing CLI version"
        uv run folder2md --version
        echo "::endgroup::"

        echo "::group::Testing ignore file generation"
        uv run folder2md --init-ignore --force
        test -f .folder2md_ignore
        echo "::endgroup::"

        echo "::group::Testing basic functionality"
        mkdir -p test_project/src
        echo "print('Hello World')" > test_project/src/main.py
        echo "# Test Project" > test_project/README.md
        cd test_project
        uv run folder2md . --output test_output.md
        test -f test_output.md
        grep -q "Hello World" test_output.md
        grep -q "Test Project" test_output.md
        echo "::endgroup::"

    - name: Cleanup
      if: always()
      run: |
        rm -rf test_project .folder2md_ignore || true
